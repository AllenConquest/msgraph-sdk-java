// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.requests.extensions;
import com.microsoft.graph.models.extensions.WorkbookTable;
import com.microsoft.graph.requests.extensions.WorkbookTableItemAtRequest;

import javax.annotation.Nullable;
import javax.annotation.Nonnull;
import com.microsoft.graph.concurrency.ICallback;
import com.microsoft.graph.concurrency.IExecutors;
import com.microsoft.graph.core.ClientException;
import com.microsoft.graph.core.IBaseClient;
import com.microsoft.graph.http.BaseRequest;
import com.microsoft.graph.http.HttpMethod;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Workbook Table Item At Request.
 */
public class WorkbookTableItemAtRequest extends BaseRequest<WorkbookTable> {

    /**
     * The request for this WorkbookTableItemAt
     *
     * @param requestUrl     the request URL
     * @param client         the service client
     * @param requestOptions the options for this request
     */
    public WorkbookTableItemAtRequest(@Nonnull final String requestUrl, @Nonnull final IBaseClient client, @Nullable final java.util.List<? extends com.microsoft.graph.options.Option> requestOptions) {
        super(requestUrl, client, requestOptions, WorkbookTable.class);
    }

    /**
     * Patches the WorkbookTableItemAt
     * @param srcWorkbookTable the WorkbookTable with which to PATCH
     * @param callback the callback to be called after success or failure
     */
    public void patch(@Nonnull WorkbookTable srcWorkbookTable, @Nonnull final ICallback<? super WorkbookTable> callback) {
        send(HttpMethod.PATCH, callback, srcWorkbookTable);
    }

    /**
     * Patches the WorkbookTableItemAt
     *
     * @param srcWorkbookTable the WorkbookTable with which to PATCH
     * @return the WorkbookTable
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
     @Nullable
     public WorkbookTable patch(@Nonnull final WorkbookTable srcWorkbookTable) throws ClientException {
        return this.send(HttpMethod.PATCH, srcWorkbookTable);
    }

    /**
     * Puts the WorkbookTableItemAt
     *
     * @param srcWorkbookTable the WorkbookTable to PUT
     * @param callback the callback to be called after success or failure
     */
    public void put(@Nonnull final WorkbookTable srcWorkbookTable, @Nonnull final ICallback<? super WorkbookTable> callback) {
        send(HttpMethod.PUT, callback, srcWorkbookTable);
    }

    /**
     * Puts the WorkbookTableItemAt
     *
     * @param srcWorkbookTable the WorkbookTable to PUT
     * @return the WorkbookTable
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
     @Nullable
     public WorkbookTable put(@Nonnull final WorkbookTable srcWorkbookTable) throws ClientException {
        return this.send(HttpMethod.PUT, srcWorkbookTable);
    }
    /**
     * Gets the WorkbookTable
     *
     * @param callback the callback to be called after success or failure
     */
    public void get(@Nonnull final ICallback<? super WorkbookTable> callback) {
        send(HttpMethod.GET, callback, null);
    }

    /**
     * Gets the WorkbookTable
     *
     * @return the WorkbookTable
     * @throws ClientException an exception occurs if there was an error while the request was sent
     */
    @Nullable
    public WorkbookTable get() throws ClientException {
       return send(HttpMethod.GET, null);
    }

    /**
     * Sets the select clause for the request
     *
     * @param value the select clause
     * @return the updated request
     */
    @Nonnull
    public WorkbookTableItemAtRequest select(@Nonnull final String value) {
        addSelectOption(value);
        return this;
    }

    /**
     * Sets the expand clause for the request
     *
     * @param value the expand clause
     * @return the updated request
     */
    @Nonnull
    public WorkbookTableItemAtRequest expand(@Nonnull final String value) {
        addExpandOption(value);
        return this;
    }

    /**
     * Sets the filter clause for the request
     *
     * @param value the filter clause
     * @return the updated request
     */
    @Nonnull
    public WorkbookTableItemAtRequest filter(@Nonnull final String value) {
        addFilterOption(value);
        return this;
    }

    /**
     * Sets the order by clause for the request
     *
     * @param value the order by clause
     * @return the updated request
     */
    @Nonnull
    public WorkbookTableItemAtRequest orderBy(@Nonnull final String value) {
        addOrderByOption(value);
        return this;
    }

    /**
     * Sets the count value for the request
     *
     * @param value whether or not to return the count of objects with the request
     * @return the updated request
     */
    @Nonnull
    public WorkbookTableItemAtRequest count(final boolean value) {
        addCountOption(value);
        return this;
    }
    /**
     * Sets the count value to true for the request
     *
     * @return the updated request
     */
    @Nonnull
    public WorkbookTableItemAtRequest count() {
        addCountOption(true);
        return this;
    }
}
