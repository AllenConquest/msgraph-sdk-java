// ------------------------------------------------------------------------------
// Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
// ------------------------------------------------------------------------------

package com.microsoft.graph.models.extensions;
import com.microsoft.graph.serializer.ISerializer;
import com.microsoft.graph.serializer.IJsonBackedObject;
import com.microsoft.graph.serializer.AdditionalDataManager;
import java.util.EnumSet;
import com.microsoft.graph.http.BaseCollectionPage;
import com.microsoft.graph.models.extensions.ManagedEBook;
import com.microsoft.graph.models.extensions.MobileAppCategory;
import com.microsoft.graph.models.extensions.ManagedDeviceMobileAppConfiguration;
import com.microsoft.graph.models.extensions.MobileApp;
import com.microsoft.graph.models.extensions.VppToken;
import com.microsoft.graph.models.extensions.AndroidManagedAppProtection;
import com.microsoft.graph.models.extensions.DefaultManagedAppProtection;
import com.microsoft.graph.models.extensions.IosManagedAppProtection;
import com.microsoft.graph.models.extensions.ManagedAppPolicy;
import com.microsoft.graph.models.extensions.ManagedAppRegistration;
import com.microsoft.graph.models.extensions.ManagedAppStatus;
import com.microsoft.graph.models.extensions.MdmWindowsInformationProtectionPolicy;
import com.microsoft.graph.models.extensions.TargetedManagedAppConfiguration;
import com.microsoft.graph.models.extensions.WindowsInformationProtectionPolicy;
import com.microsoft.graph.models.extensions.Entity;


import com.google.gson.JsonObject;
import com.google.gson.annotations.SerializedName;
import com.google.gson.annotations.Expose;

// **NOTE** This file was generated by a tool and any changes will be overwritten.

/**
 * The class for the Device App Management.
 */
public class DeviceAppManagement extends Entity implements IJsonBackedObject {


    /**
     * The Is Enabled For Microsoft Store For Business.
     * Whether the account is enabled for syncing applications from the Microsoft Store for Business.
     */
    @SerializedName(value = "isEnabledForMicrosoftStoreForBusiness", alternate = {"IsEnabledForMicrosoftStoreForBusiness"})
    @Expose
    public Boolean isEnabledForMicrosoftStoreForBusiness;

    /**
     * The Microsoft Store For Business Language.
     * The locale information used to sync applications from the Microsoft Store for Business. Cultures that are specific to a country/region. The names of these cultures follow RFC 4646 (Windows Vista and later). The format is -&amp;lt;country/regioncode2&amp;gt;, where  is a lowercase two-letter code derived from ISO 639-1 and &amp;lt;country/regioncode2&amp;gt; is an uppercase two-letter code derived from ISO 3166. For example, en-US for English (United States) is a specific culture.
     */
    @SerializedName(value = "microsoftStoreForBusinessLanguage", alternate = {"MicrosoftStoreForBusinessLanguage"})
    @Expose
    public String microsoftStoreForBusinessLanguage;

    /**
     * The Microsoft Store For Business Last Completed Application Sync Time.
     * The last time an application sync from the Microsoft Store for Business was completed.
     */
    @SerializedName(value = "microsoftStoreForBusinessLastCompletedApplicationSyncTime", alternate = {"MicrosoftStoreForBusinessLastCompletedApplicationSyncTime"})
    @Expose
    public java.util.Calendar microsoftStoreForBusinessLastCompletedApplicationSyncTime;

    /**
     * The Microsoft Store For Business Last Successful Sync Date Time.
     * The last time the apps from the Microsoft Store for Business were synced successfully for the account.
     */
    @SerializedName(value = "microsoftStoreForBusinessLastSuccessfulSyncDateTime", alternate = {"MicrosoftStoreForBusinessLastSuccessfulSyncDateTime"})
    @Expose
    public java.util.Calendar microsoftStoreForBusinessLastSuccessfulSyncDateTime;

    /**
     * The Managed EBooks.
     * The Managed eBook.
     */
    @SerializedName(value = "managedEBooks", alternate = {"ManagedEBooks"})
    @Expose
    public BaseCollectionPage<ManagedEBook> managedEBooks;

    /**
     * The Mobile App Categories.
     * The mobile app categories.
     */
    @SerializedName(value = "mobileAppCategories", alternate = {"MobileAppCategories"})
    @Expose
    public BaseCollectionPage<MobileAppCategory> mobileAppCategories;

    /**
     * The Mobile App Configurations.
     * The Managed Device Mobile Application Configurations.
     */
    @SerializedName(value = "mobileAppConfigurations", alternate = {"MobileAppConfigurations"})
    @Expose
    public BaseCollectionPage<ManagedDeviceMobileAppConfiguration> mobileAppConfigurations;

    /**
     * The Mobile Apps.
     * The mobile apps.
     */
    @SerializedName(value = "mobileApps", alternate = {"MobileApps"})
    @Expose
    public BaseCollectionPage<MobileApp> mobileApps;

    /**
     * The Vpp Tokens.
     * List of Vpp tokens for this organization.
     */
    @SerializedName(value = "vppTokens", alternate = {"VppTokens"})
    @Expose
    public BaseCollectionPage<VppToken> vppTokens;

    /**
     * The Android Managed App Protections.
     * Android managed app policies.
     */
    @SerializedName(value = "androidManagedAppProtections", alternate = {"AndroidManagedAppProtections"})
    @Expose
    public BaseCollectionPage<AndroidManagedAppProtection> androidManagedAppProtections;

    /**
     * The Default Managed App Protections.
     * Default managed app policies.
     */
    @SerializedName(value = "defaultManagedAppProtections", alternate = {"DefaultManagedAppProtections"})
    @Expose
    public BaseCollectionPage<DefaultManagedAppProtection> defaultManagedAppProtections;

    /**
     * The Ios Managed App Protections.
     * iOS managed app policies.
     */
    @SerializedName(value = "iosManagedAppProtections", alternate = {"IosManagedAppProtections"})
    @Expose
    public BaseCollectionPage<IosManagedAppProtection> iosManagedAppProtections;

    /**
     * The Managed App Policies.
     * Managed app policies.
     */
    @SerializedName(value = "managedAppPolicies", alternate = {"ManagedAppPolicies"})
    @Expose
    public BaseCollectionPage<ManagedAppPolicy> managedAppPolicies;

    /**
     * The Managed App Registrations.
     * The managed app registrations.
     */
    @SerializedName(value = "managedAppRegistrations", alternate = {"ManagedAppRegistrations"})
    @Expose
    public BaseCollectionPage<ManagedAppRegistration> managedAppRegistrations;

    /**
     * The Managed App Statuses.
     * The managed app statuses.
     */
    @SerializedName(value = "managedAppStatuses", alternate = {"ManagedAppStatuses"})
    @Expose
    public BaseCollectionPage<ManagedAppStatus> managedAppStatuses;

    /**
     * The Mdm Windows Information Protection Policies.
     * Windows information protection for apps running on devices which are MDM enrolled.
     */
    @SerializedName(value = "mdmWindowsInformationProtectionPolicies", alternate = {"MdmWindowsInformationProtectionPolicies"})
    @Expose
    public BaseCollectionPage<MdmWindowsInformationProtectionPolicy> mdmWindowsInformationProtectionPolicies;

    /**
     * The Targeted Managed App Configurations.
     * Targeted managed app configurations.
     */
    @SerializedName(value = "targetedManagedAppConfigurations", alternate = {"TargetedManagedAppConfigurations"})
    @Expose
    public BaseCollectionPage<TargetedManagedAppConfiguration> targetedManagedAppConfigurations;

    /**
     * The Windows Information Protection Policies.
     * Windows information protection for apps running on devices which are not MDM enrolled.
     */
    @SerializedName(value = "windowsInformationProtectionPolicies", alternate = {"WindowsInformationProtectionPolicies"})
    @Expose
    public BaseCollectionPage<WindowsInformationProtectionPolicy> windowsInformationProtectionPolicies;


    /**
     * The raw representation of this class
     */
    private JsonObject rawObject;

    /**
     * The serializer
     */
    private ISerializer serializer;

    /**
     * Gets the raw representation of this class
     *
     * @return the raw representation of this class
     */
    public JsonObject getRawObject() {
        return rawObject;
    }

    /**
     * Gets serializer
     *
     * @return the serializer
     */
	@Override
    public ISerializer getSerializer() {
        return serializer;
    }

    /**
     * Sets the raw JSON object
     *
     * @param serializer the serializer
     * @param json the JSON object to set this object to
     */
    public void setRawObject(final ISerializer serializer, final JsonObject json) {
        this.serializer = serializer;
        rawObject = json;


        if (json.has("managedEBooks")) {
            managedEBooks = serializer.deserializeObject(json.get("managedEBooks").toString(), new BaseCollectionPage<ManagedEBook>(new java.util.ArrayList<ManagedEBook>(), null).getClass());
        }

        if (json.has("mobileAppCategories")) {
            mobileAppCategories = serializer.deserializeObject(json.get("mobileAppCategories").toString(), new BaseCollectionPage<MobileAppCategory>(new java.util.ArrayList<MobileAppCategory>(), null).getClass());
        }

        if (json.has("mobileAppConfigurations")) {
            mobileAppConfigurations = serializer.deserializeObject(json.get("mobileAppConfigurations").toString(), new BaseCollectionPage<ManagedDeviceMobileAppConfiguration>(new java.util.ArrayList<ManagedDeviceMobileAppConfiguration>(), null).getClass());
        }

        if (json.has("mobileApps")) {
            mobileApps = serializer.deserializeObject(json.get("mobileApps").toString(), new BaseCollectionPage<MobileApp>(new java.util.ArrayList<MobileApp>(), null).getClass());
        }

        if (json.has("vppTokens")) {
            vppTokens = serializer.deserializeObject(json.get("vppTokens").toString(), new BaseCollectionPage<VppToken>(new java.util.ArrayList<VppToken>(), null).getClass());
        }

        if (json.has("androidManagedAppProtections")) {
            androidManagedAppProtections = serializer.deserializeObject(json.get("androidManagedAppProtections").toString(), new BaseCollectionPage<AndroidManagedAppProtection>(new java.util.ArrayList<AndroidManagedAppProtection>(), null).getClass());
        }

        if (json.has("defaultManagedAppProtections")) {
            defaultManagedAppProtections = serializer.deserializeObject(json.get("defaultManagedAppProtections").toString(), new BaseCollectionPage<DefaultManagedAppProtection>(new java.util.ArrayList<DefaultManagedAppProtection>(), null).getClass());
        }

        if (json.has("iosManagedAppProtections")) {
            iosManagedAppProtections = serializer.deserializeObject(json.get("iosManagedAppProtections").toString(), new BaseCollectionPage<IosManagedAppProtection>(new java.util.ArrayList<IosManagedAppProtection>(), null).getClass());
        }

        if (json.has("managedAppPolicies")) {
            managedAppPolicies = serializer.deserializeObject(json.get("managedAppPolicies").toString(), new BaseCollectionPage<ManagedAppPolicy>(new java.util.ArrayList<ManagedAppPolicy>(), null).getClass());
        }

        if (json.has("managedAppRegistrations")) {
            managedAppRegistrations = serializer.deserializeObject(json.get("managedAppRegistrations").toString(), new BaseCollectionPage<ManagedAppRegistration>(new java.util.ArrayList<ManagedAppRegistration>(), null).getClass());
        }

        if (json.has("managedAppStatuses")) {
            managedAppStatuses = serializer.deserializeObject(json.get("managedAppStatuses").toString(), new BaseCollectionPage<ManagedAppStatus>(new java.util.ArrayList<ManagedAppStatus>(), null).getClass());
        }

        if (json.has("mdmWindowsInformationProtectionPolicies")) {
            mdmWindowsInformationProtectionPolicies = serializer.deserializeObject(json.get("mdmWindowsInformationProtectionPolicies").toString(), new BaseCollectionPage<MdmWindowsInformationProtectionPolicy>(new java.util.ArrayList<MdmWindowsInformationProtectionPolicy>(), null).getClass());
        }

        if (json.has("targetedManagedAppConfigurations")) {
            targetedManagedAppConfigurations = serializer.deserializeObject(json.get("targetedManagedAppConfigurations").toString(), new BaseCollectionPage<TargetedManagedAppConfiguration>(new java.util.ArrayList<TargetedManagedAppConfiguration>(), null).getClass());
        }

        if (json.has("windowsInformationProtectionPolicies")) {
            windowsInformationProtectionPolicies = serializer.deserializeObject(json.get("windowsInformationProtectionPolicies").toString(), new BaseCollectionPage<WindowsInformationProtectionPolicy>(new java.util.ArrayList<WindowsInformationProtectionPolicy>(), null).getClass());
        }
    }
}
